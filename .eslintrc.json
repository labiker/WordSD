{
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/electron",
    "plugin:import/typescript"
  ],
  "parser": "@typescript-eslint/parser",
  "rules": {
    "semi": ["error", "always"],                               // 强制使用分号结束语句。
    "semi-spacing": "off",                                     // 强制分号之前和之后使用一致的空格。
    "no-unused-vars": "error",                                 // 禁止未使用的变量。
    "no-undef": "error",                                       // 禁止使用未声明的变量。
    "no-console": ["error", { "allow": ["warn", "error"] }],   // 禁止使用`console`对象的方法，但允许使用`console.warn`和`console.error`方法。
    "indent": ["error", 4, {                                   // 强制一致的缩进。
      "SwitchCase": 1                                          // 强制`switch`语句中的`case`子句的缩进级别。
    }],
    "quotes": ["error", "single", { "avoidEscape": true }],    // 强制使用一致的单引号。
    "no-trailing-spaces": "error",                             // 禁用行尾空格。
    "comma-dangle": ["error", "always-multiline"],             // 要求在对象和数组字面量中，多行元素的末尾必须加上逗号。
    "no-cond-assign": ["error", "except-parens"],              // 禁止在条件语句中出现赋值操作符（例如 =），除非用括号明确指定。
    "no-mixed-spaces-and-tabs": "error",                       // 禁止使用空格和 tab 混合缩进。
    "no-const-assign": "error",                                // 禁止修改使用 `const` 声明的变量。
    "no-var": "error",                                         // 要求使用 `let` 或 `const` 而不是 `var`。
    "no-else-return": "error",                                 // 要求在`if`语句的分支中要么有`return`语句，要么没有。
    "no-undef-init": "error",                                  // 禁止初始化为`undefined`的变量。
    "no-irregular-whitespace": "error",                        // 禁止不规则的空白。
    "eol-last": "error",                                       // 要求文件末尾存在空行（换行符）。
    "accessor-pairs": "error",                                 // 要求对象属性中的`getter`和`setter`成对出现。
    "array-callback-return": "error",                          // 要求数组的回调函数必须有返回值。
    "block-scoped-var": "error",                               // 禁止在块级作用域外部访问块级作用域内的变量。
    "consistent-return": "error",                              // 要求函数中所有代码路径都返回值或都不返回值。
    "curly": ["error", "multi-line"],                          // 要求在多行代码块中使用花括号。
    "dot-location": ["error", "property"],                     // 要求点操作符(.)在属性上一行的结尾。
    "dot-notation": "error",                                   // 要求使用点操作符(.)访问对象属性，而不是中括号([])。
    "eqeqeq": "error",                                         // 要求使用严格相等运算符(===和!==)，而不是宽松相等运算符(==和!=)。
    "no-alert": "error",                                       // 禁用`alert`、`confirm`和`prompt`。
    "no-caller": "error",                                      // 禁用`arguments.caller`或`arguments.callee`。
    "no-div-regex": "error",                                   // 禁止在正则表达式中使用除法操作符。
    "no-empty-function": "error",                              // 禁止出现空函数。
    "no-eq-null": "error",                                     // 禁止使用`== null`比较，建议使用`=== null`来检查是否为`null`。
    "no-eval": "error",                                        // 禁止使用`eval()`函数，因为它有潜在的安全问题和性能问题。
    "no-extend-native": "error",                               // 禁止修改原生对象的原型（prototype）。
    "no-extra-bind": "error",                                  // 禁止不必要的`.bind()`方法。
    "no-extra-label": "error",                                 // 禁用不必要的标签。
    "no-floating-decimal": "error",                            // 禁止数字字面量中使用前导和末尾小数点。
    "no-implicit-coercion": "error",                           // 禁止使用短符号进行类型转换。
    "no-implicit-globals": "error",                            // 禁止在全局范围内使用变量声明和函数声明。
    "no-implied-eval": "error",                                // 禁止使用类似`setTimeout`的函数。
    "no-iterator": "error",                                    // 禁用`__iterator__`属性。
    "no-labels": "error",                                      // 禁用标签语句。
    "no-lone-blocks": "error",                                 // 禁用不必要的嵌套块。
    "no-loop-func": "error",                                   // 禁止在循环中出现函数声明和表达式。
    "no-multi-spaces": "error",                                // 禁止使用多个空格。
    "no-multi-str": "error",                                   // 禁止使用多行字符串。
    "no-native-reassign": "error",                             // 禁止对原生对象或只读的全局对象进行赋值。
    "no-new": "error",                                         // 禁止使用`new`操作符调用构造函数，但允许使用`new`操作符调用`String`、`Number`和`Boolean`类型的值。
    "no-new-func": "error",                                    // 禁止使用`Function`构造函数。
    "no-new-wrappers": "error",                                // 禁止对`String`、`Number`和`Boolean`使用`new`操作符。
    "no-octal-escape": "error",                                // 禁止在字符串中使用八进制转义序列。
    "no-proto": "error",                                       // 禁止使用`__proto__`属性，建议使用`Object.getPrototypeOf`。
    "no-return-assign": "error",                               // 禁止在`return`语句中使用赋值语句。
    "no-script-url": "error",                                  // 禁止使用`javascript:`伪协议。
    "no-self-compare": "error",                                // 禁止自身与自身进行比较，例如 `x === x`。
    "no-sequences": "error",                                   // 禁止使用逗号操作符，例如 `a, b`。
    "no-throw-literal": "error",                               // 禁止抛出字面量（非Error对象）作为异常。
    "no-unmodified-loop-condition": "error",                   // 禁止在循环条件中使用不会改变的表达式。
    "no-unused-expressions": [                                 // 禁止未使用的表达式，但允许短路逻辑和三元运算符的未使用表达式。
      "error",
      { "allowShortCircuit": true, "allowTernary": true }
    ],
    "no-useless-call": "error",                                // 禁止不必要的函数调用。
    "no-useless-concat": "error",                              // 禁止不必要的字符串拼接。
    "no-void": "error",                                        // 禁止使用void操作符。
    "yoda": "error",                                           // 要求将字面量值（如 `1`、`"hello"`）放在条件表达式的左侧，例如 `if (1 === x)`。
    "no-catch-shadow": "error",                                // 禁止在`catch`子句中声明与外部作用域重名的变量。
    "no-label-var": "error",                                   // 禁止在标签语句中声明与标签名称相同的变量。
    "no-restricted-globals": "error",                          // 禁止使用指定的全局变量。
    "no-use-before-define": ["error", "nofunc"]                // 禁止在变量声明之前使用变量，但允许在函数之前使用函数。
  }
}
